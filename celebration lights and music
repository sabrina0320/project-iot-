#define BLYNK_PRINT Serial

/* Fill in information from Blynk Device Info here */
#define BLYNK_TEMPLATE_ID "TMPL6nmPNY5ug"
#define BLYNK_TEMPLATE_NAME "shabrisya"
#define BLYNK_AUTH_TOKEN "dL3EZjCcpLVa4VDkA1wFtDaV2swMSsn5"

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "Ina";
char password[] = "cannotgive";

// Define the pins for the buzzer and LEDs
const int buzzerPin = D7;
const int ledPin1 = D2;
const int ledPin2 = D3;

// Notes frequencies for the melody
const int NOTE_E4 = 330;
const int NOTE_G4 = 392;
const int NOTE_A4 = 440;
const int NOTE_B4 = 494;
const int NOTE_C5 = 523;
const int NOTE_D5 = 587;
const int NOTE_E5 = 659;
const int NOTE_F5 = 698;
const int NOTE_G5 = 784;

// Note durations: 4 = quarter note, 8 = eighth note, etc.
int melody[] = {
  NOTE_E4, NOTE_E4, NOTE_E4, NOTE_E4,
  NOTE_E4, NOTE_E4, NOTE_E4, NOTE_G4, NOTE_C5, NOTE_D5, NOTE_E5,
  NOTE_F5, NOTE_F5, NOTE_F5, NOTE_F5,
  NOTE_F5, NOTE_E5, NOTE_E5, NOTE_E5, NOTE_D5, NOTE_D5, NOTE_E5, NOTE_D5, NOTE_G4
};

int noteDurations[] = {
  4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 2,
  4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 2
};

// Blynk virtual pin write handlers
BLYNK_WRITE(V0){
  int value = param.asInt();
  digitalWrite(ledPin1, value);
}

BLYNK_WRITE(V1){
  int value = param.asInt();
  digitalWrite(ledPin2, value);
}

BLYNK_WRITE(V3){
  int value = param.asInt();
  if (value == 1) {
    playMelody();
  }
}

void playMelody() {
  // Play the melody with LEDs blinking
  for (int thisNote = 0; thisNote < sizeof(melody)/sizeof(melody[0]); thisNote++) {
    // Calculate the note duration, take one second divided by the note type.
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(buzzerPin, melody[thisNote], noteDuration);

    // Blink LEDs in sync with the melody
    digitalWrite(ledPin1, HIGH);  // Turn LED1 on
    digitalWrite(ledPin2, HIGH);  // Turn LED2 on

    // To distinguish the notes, set a minimum time between them.
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);

    // Stop the tone playing and turn off the LEDs
    noTone(buzzerPin);
    digitalWrite(ledPin1, LOW);   // Turn LED1 off
    digitalWrite(ledPin2, LOW);   // Turn LED2 off
  }

  // Add a delay between repeats of the melody
  delay(2000);
}

void setup() {
  // Debug console
  Serial.begin(115200);

  // Initialize LED pins as outputs
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);

  // Initialize Wi-Fi connectivity and Blynk Authentication
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, password);
}

void loop() {
  Blynk.run();
}
